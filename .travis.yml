language: php

php:
    - "5.6"

env:
    - WP_VERSION=master WP_MULTISITE=0 #Current stable release

# Test WP master, current and previous stable releases on most popular PHP 5.5, 5.6 (w/ multisite enabled for 5.6)
# Test WP master, current and previous stable releases on minimum PHP 5.2 (w/o multisite enabled)
# Test WP current on PHP 5.3, 5.4 (w/o multisite enabled)
# Test WP master on PHP hhvm, 7.0 and nightly (w/o multisite enabled)
# Run PHPCS on master and stable with PHP 5.6

matrix:
  include:
    # current stable release w/ multisite
    - php: "5.6"
      env: WP_VERSION=master WP_MULTISITE=1 SNIFF=1
    - php: "5.6"
      env: WP_VERSION=4.6 WP_MULTISITE=0 SNIFF=1
    - php: "5.6"
      env: WP_VERSION=4.6 WP_MULTISITE=1 SNIFF=1
    - php: "5.6"
      env: WP_VERSION=4.5 WP_MULTISITE=0
    - php: "5.5"
      env: WP_VERSION=master WP_MULTISITE=0    
    - php: "5.5"
      env: WP_VERSION=4.6 WP_MULTISITE=0
    - php: "5.5"
      env: WP_VERSION=4.5 WP_MULTISITE=0
    - php: "5.2"
      env: WP_VERSION=master WP_MULTISITE=0
    - php: "5.2"
      env: WP_VERSION=4.6 WP_MULTISITE=0
    - php: "5.2"
      env: WP_VERSION=4.5 WP_MULTISITE=0
    - php: "5.3"
      env: WP_VERSION=4.6 WP_MULTISITE=0
    - php: "5.4"
      env: WP_VERSION=4.6 WP_MULTISITE=0
    - php: "7.0"
      env: WP_VERSION=master WP_MULTISITE=0
    - php: "7.0"
      env: WP_VERSION=4.6 WP_MULTISITE=0
    - php: "hhvm"
      env: WP_VERSION=master WP_MULTISITE=0
    - php: "nightly"
      env: WP_VERSION=master WP_MULTISITE=0
  allow_failures:
    - php: "hhvm"
    - php: "nightly"

before_script:
    # PHPunit
    - export PLUGIN_SLUG=$(basename $(pwd))
    - git clone --depth=1 --branch $WP_VERSION git://develop.git.wordpress.org/ /tmp/wordpress
    - cd ..
    - mv $PLUGIN_SLUG "/tmp/wordpress/src/wp-content/plugins/$PLUGIN_SLUG"
    - cd /tmp/wordpress
    - git checkout $WP_VERSION
    - mysql -e "CREATE DATABASE wordpress_tests;" -uroot
    - cp wp-tests-config-sample.php wp-tests-config.php
    - sed -i "s/youremptytestdbnamehere/wordpress_tests/" wp-tests-config.php
    - sed -i "s/yourusernamehere/travis/" wp-tests-config.php
    - sed -i "s/yourpasswordhere//" wp-tests-config.php
    - cd "/tmp/wordpress/src/wp-content/plugins/$PLUGIN_SLUG"
    # PHPCS
    - export PHPCS_DIR=/tmp/phpcs
    - export WPCS_DIR=/tmp/wpcs
    # Install CodeSniffer for WordPress Coding Standards checks.
    - if [[ "$SNIFF" == "1" ]]; then git clone -b master --depth 1 https://github.com/squizlabs/PHP_CodeSniffer.git $PHPCS_DIR; fi
    # Install WordPress Coding Standards.
    - if [[ "$SNIFF" == "1" ]]; then git clone -b master --depth 1 https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards.git $WPCS_DIR; fi
    # Hop into CodeSniffer directory.
    - if [[ "$SNIFF" == "1" ]]; then cd $PHPCS_DIR; fi
    # Set install path for WordPress Coding Standards.
    # @link https://github.com/squizlabs/PHP_CodeSniffer/blob/4237c2fc98cc838730b76ee9cee316f99286a2a7/CodeSniffer.php#L1941
    - if [[ "$SNIFF" == "1" ]]; then $PHPCS_DIR/scripts/phpcs --config-set installed_paths $WPCS_DIR; fi
    # Hop back into project dir.
    - if [[ "$SNIFF" == "1" ]]; then cd $TRAVIS_BUILD_DIR; fi
    # After CodeSniffer install you should refresh your path.
    - if [[ "$SNIFF" == "1" ]]; then phpenv rehash; fi

script:
    - phpunit
    # WordPress Coding Standards.
    # @link https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards
    # @link http://pear.php.net/package/PHP_CodeSniffer/
    # -p flag: Show progress of the run.
    # -s flag: Show sniff codes in all reports.
    # -v flag: Print verbose output.
    # -n flag: Do not print warnings. (shortcut for --warning-severity=0)
    # --standard: Use WordPress as the standard.
    # --extensions: Only sniff PHP files.
    - if [[ "$SNIFF" == "1" ]]; then $PHPCS_DIR/scripts/phpcs -p -s -v -n . --standard=./phpcs.xml --extensions=php; fi

sudo: false